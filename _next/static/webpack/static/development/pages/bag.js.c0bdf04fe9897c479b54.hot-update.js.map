{"version":3,"file":"static/webpack/static\\development\\pages\\bag.js.c0bdf04fe9897c479b54.hot-update.js","sources":["webpack:///./components/BagProvider.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport * as _ from 'lodash';\r\nimport 'es6-promise';\r\nimport fetch from 'isomorphic-fetch';\r\n\r\n/* First we will make a new context */\r\nconst BagContext = React.createContext()\r\n\r\n/* Then create a provider Component */\r\nclass BagProvider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleBagUpdate = this.handleBagUpdate.bind(this);\r\n        this.handleVariantChange = this.handleVariantChange.bind(this);\r\n        this.handleDeleteItem = this.handleDeleteItem.bind(this);\r\n        this.handleQuantityChange = this.handleQuantityChange.bind(this);\r\n        this.clearBag = this.clearBag.bind(this);\r\n        this.displayBagTotals = this.displayBagTotals.bind(this);\r\n        this.handleNotesUpdate = this.handleNotesUpdate.bind(this);\r\n        this.handleHelpChange = this.handleHelpChange.bind(this);\r\n        this.handleMetadataChange = this.handleMetadataChange.bind(this);\r\n        this.logOrder = this.logOrder.bind(this);\r\n\r\n        this.state = {\r\n          bag: [],\r\n          selectedVariant: {\r\n            id: 0,\r\n            sku: '',\r\n            price: '',\r\n            quantity: 0,\r\n            image:'',\r\n            name: '',\r\n            useNotes: false,\r\n            notesTitle: '',\r\n            noteContents: '',\r\n            hasNotesError: false,\r\n            metadata: []\r\n          },\r\n          playBagAnimation: false,\r\n          showHelp: false\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n        var savedBag = sessionStorage.craftyBeeBag ? JSON.parse(sessionStorage.craftyBeeBag) : [];\r\n        this.setState({ bag: savedBag });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        sessionStorage.setItem('craftyBeeBag', JSON.stringify(this.state.bag));\r\n    }\r\n\r\n    handleBagUpdate = (e) => {\r\n        e.preventDefault();\r\n        var bag = sessionStorage.craftyBeeBag ? JSON.parse(sessionStorage.craftyBeeBag) : this.state.bag;\r\n        var selectedVariant = this.state.selectedVariant;\r\n        if(selectedVariant.useNotes && selectedVariant.noteContents === ''){\r\n            selectedVariant.hasNotesError = true;\r\n            this.setState({ selectedVariant: selectedVariant });\r\n            return false;\r\n\r\n        }\r\n        else if(selectedVariant.hasNotesError === true && selectedVariant.useNotes && selectedVariant.noteContents !== ''){\r\n            selectedVariant.hasNotesError = false;\r\n            this.setState({ selectedVariant: selectedVariant });\r\n        }\r\n\r\n        let bagItem = _.find(bag, { sku: selectedVariant.sku});\r\n        let index = _.findIndex(bag, {sku: selectedVariant.sku});\r\n\r\n        if(bag.length > 0 && index != -1){\r\n            var newQuantity = bagItem.quantity + 1;\r\n            bag.splice(index, 1, {sku: selectedVariant.sku, quantity: newQuantity, \r\n                                  image: selectedVariant.imageTiny, name: selectedVariant.name, \r\n                                  price: selectedVariant.price, noteContents: selectedVariant.noteContents, metadata: selectedVariant.metadata});\r\n        }\r\n        else{\r\n            bag.push({sku: selectedVariant.sku, quantity: 1, \r\n                        image: selectedVariant.imageTiny, \r\n                        name: selectedVariant.name, \r\n                        price: selectedVariant.price,                   \r\n                        noteContents: selectedVariant.noteContents,\r\n                        metadata: selectedVariant.metadata\r\n                     });\r\n        }\r\n    \r\n        this.setState({ bag: bag, playBagAnimation: true });\r\n\r\n        setTimeout(\r\n            function() {\r\n                this.setState({ playBagAnimation: false });\r\n            }\r\n            .bind(this),\r\n            3000\r\n        );\r\n    }\r\n\r\n    handleVariantChange(e){\r\n        var id = Number(e.currentTarget.value);\r\n        let selectedOption = null;\r\n        let metadata = null;\r\n        for(var i = 0; i < this.props.products.length; i++){\r\n            selectedOption = _.find(this.props.products[i].options, ['id', id]);\r\n            metadata = this.props.products[i].metadata;\r\n            if(selectedOption){\r\n                break;\r\n            }\r\n        }\r\n        \r\n        var selectedVariant = this.state.selectedVariant;\r\n        selectedVariant.id = selectedOption.id;\r\n        selectedVariant.sku = selectedOption.sku;\r\n        selectedVariant.price = selectedOption.price;\r\n        selectedVariant.imageTiny = selectedOption.imageTiny;\r\n        selectedVariant.imageLarge = selectedOption.imageLarge;\r\n        selectedVariant.name = selectedOption.name;\r\n        selectedVariant.useNotes = selectedOption.useNotes;\r\n        selectedVariant.notesTitle = selectedOption.notesTitle;\r\n        selectedVariant.noteContents = '';\r\n        \r\n        //product metadata gets attached to selected variant(makes things sort of messy)\r\n        selectedVariant.metadata = []\r\n\r\n        if(metadata && metadata.length > 0){\r\n            selectedVariant.metadata.push({name: metadata[0].groupName, value:metadata[0].name});\r\n        }\r\n       \r\n        this.setState({ selectedVariant: selectedVariant, showHelp: false });\r\n    }\r\n\r\n    handleDeleteItem = sku => {\r\n        const bag = this.state.bag.filter(item => item.sku !== sku);\r\n        this.setState({ bag: bag });\r\n    \r\n    };\r\n\r\n    handleQuantityChange(e, sku){\r\n        e.preventDefault();\r\n\r\n        let bag = this.state.bag;\r\n        var quantity = Number(e.target.value);\r\n        let bagItem = _.find(bag, { sku: sku});\r\n        let index = _.findIndex(bag, {sku: sku});\r\n\r\n        bag.splice(index, 1, {sku: bagItem.sku, quantity: quantity, \r\n                              image: bagItem.image, name: bagItem.name, \r\n                              price: bagItem.price, useNotes: bagItem.useNotes, \r\n                              notesTitle: bagItem.notesTitle, noteContents: bagItem.noteContents,\r\n                              metadata: bagItem.metadata});\r\n        this.setState({ bag: bag });  \r\n    }\r\n\r\n    handleNotesUpdate(e, id){\r\n        e.preventDefault();\r\n        let noteText = e.target.value;\r\n        var selectedVariant = this.state.selectedVariant;\r\n        selectedVariant.noteContents = noteText;\r\n        this.setState({ selectedVariant: selectedVariant });\r\n\r\n    }\r\n\r\n    handleHelpChange(e){\r\n        this.setState({showHelp: true});\r\n    }\r\n\r\n    handleMetadataChange(e){\r\n        let value = e.currentTarget.value;\r\n        let name = e.target.item(e.target.selectedIndex).getAttribute('name');\r\n        var selectedVariant = this.state.selectedVariant;\r\n\r\n        for(var i = 0; i < selectedVariant.metadata.length; i++){\r\n            if(selectedVariant.metadata[i].name === name){\r\n                selectedVariant.metadata.splice(i, 1, {name: selectedVariant.metadata[i].name, value: value});\r\n                this.setState({selectedVariant: selectedVariant});\r\n                return;\r\n            }\r\n        }\r\n\r\n        selectedVariant.metadata.push({name: name, value: value});\r\n        this.setState({selectedVariant: selectedVariant});\r\n    }\r\n\r\n    formatDollarsToCents(value){\r\n        value = (value + '').replace(/[^\\d.-]/g, '');\r\n        if (value && value.includes('.')) {\r\n            value = value.substring(0, value.indexOf('.') + 3);\r\n        }\r\n    \r\n        return value ? Math.round(parseFloat(value) * 100) : 0;\r\n    }\r\n\r\n    formatCentsToDollars(value){\r\n        value = (value + '').replace(/[^\\d.-]/g, '');\r\n        value = parseFloat(value);\r\n        return value ? value / 100 : 0;\r\n    }\r\n\r\n    clearBag(){\r\n        this.setState({ bag: [] });\r\n    }\r\n\r\n    displayBagTotals(){\r\n        let totals = {\r\n            subtotal: 0.00,\r\n            shipping: 0.00,\r\n            tax: 0.00,\r\n            grandTotal: 0.00\r\n        }\r\n\r\n        let subtotal = 0;\r\n        let bag = this.state.bag;\r\n        for(var i = 0; i < bag.length; i++){\r\n            var subTotalCalculation;\r\n            subTotalCalculation = this.formatDollarsToCents(bag[i].price);\r\n            subTotalCalculation = (subTotalCalculation * bag[i].quantity);\r\n            subtotal += subTotalCalculation;\r\n        }\r\n        \r\n        let tax = subtotal * 6.0;\r\n\r\n        let shipping = 0;\r\n        let grandTotal = subtotal + Math.round(tax / 100);\r\n\r\n        totals.subtotal = this.formatCentsToDollars(subtotal);\r\n        totals.tax = this.formatCentsToDollars(Math.round(tax / 100));\r\n        totals.grandTotal = this.formatCentsToDollars(grandTotal);\r\n\r\n        return totals;\r\n    }\r\n\r\n    logOrder(){\r\n\r\n        let bag = this.state.bag;\r\n        for(var i = 0; i < bag.length; i++){\r\n            let metaData = '';\r\n            if(bag[i].metadata && bag[i].metadata.length > 0){\r\n                for(var j = 0; j < bag[i].metadata.length; j++){\r\n                    metaData += bag[i].metadata[j].name + ' | ' + bag[i].metadata[j].value;\r\n                }\r\n            }\r\n            console.log(metaData)\r\n            \r\n            let headers = new Headers({\r\n                'Access-Control-Allow-Origin':'*',\r\n                'Content-Type': 'application/json',\r\n                }); \r\n\r\n            fetch('https://3ee.com/teeniebee/orders/', {\r\n                method: 'post',\r\n                mode: 'cors',\r\n                headers: headers,\r\n                body: JSON.stringify({\r\n                    title: bag[i].name,\r\n                    sku: bag[i].sku,\r\n                    quantity: bag[i].quantity,\r\n                    price: bag[i].price,\r\n                    note: bag[i].noteContents,\r\n                    metadata: metaData\r\n                })\r\n            })\r\n            .then((res) => {\r\n                console.log(res);\r\n            })\r\n        }\r\n        //log items\r\n        \r\n\r\n        /* let header = new Headers({\r\n        'Access-Control-Allow-Origin':'*',\r\n        'Content-Type': 'multipart/form-data'\r\n        });  */\r\n    }\r\n\r\n    render () {\r\n        return (\r\n        <BagContext.Provider\r\n            value={{\r\n                bag: this.state.bag,\r\n                selectedVariant: this.state.selectedVariant,\r\n                handleBagUpdate: this.handleBagUpdate,\r\n                handleVariantChange: this.handleVariantChange,\r\n                handleDeleteItem: this.handleDeleteItem,\r\n                handleQuantityChange: this.handleQuantityChange,\r\n                clearBag: this.clearBag,\r\n                displayBagTotals: this.displayBagTotals,\r\n                playBagAnimation: this.state.playBagAnimation,\r\n                handleNotesUpdate: this.handleNotesUpdate,\r\n                showHelp: this.state.showHelp,\r\n                handleHelpChange: this.handleHelpChange,\r\n                handleMetadataChange: this.handleMetadataChange,\r\n                logOrder: this.logOrder\r\n            }}>\r\n        \r\n            {this.props.children}\r\n        </BagContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n/* then make a consumer which will surface it */\r\nconst BagConsumer = BagContext.Consumer\r\n\r\nexport default BagProvider\r\nexport { BagConsumer }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA4CA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAFA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAIA;AACA;AAvFA;AA0HA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AA3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAhBA;AAdA;AAgCA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;;;AA+CA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAQA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAJA;AAKA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAJA;AAcA;AACA;AACA;AACA;AAGA;;;;;AAIA;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;;;;AAhSA;AAmSA;AACA;AACA;AADA;AAEA;;;;;A","sourceRoot":""}